
<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1.5)">
<div class="card bg-c-@((Prediction is null) ? "blue" : getCardColor(this.UseMachineLearningModel, Prediction.Probability, (int) this.BaseBallBatter.HR))  order-card">
    <div class="card-block">
        <h6 class="text-right">Hall of Fame <b>@MachineLearning.Helpers.GetPredictionLabel(this.MLModelPredictionType, UseMachineLearningModel)</b> - <span class="span-probability"><b>@this.getPredictionValue(this.UseMachineLearningModel)</b></span></h6>
        <h6 class="text-right"><span><b>@BaseBallBatter.FullPlayerName</b></span></h6>
        <div class="m-b-0">Seasons Played<span class="f-right">@BaseBallBatter.YearsPlayed</span></div>
        <div class="m-b-0">Total Bases<span class="f-right">@BaseBallBatter.TB</span></div>
        <div class="m-b-0">HR<span class="f-right">@BaseBallBatter.HR</span></div>
        <div class="m-b-0">All-Star Appearances<span class="f-right">@BaseBallBatter.AllStarAppearances</span></div>
        <div class="m-b-0">...<span class="f-right"></span></div>
    </div>
</div>
</Animate>

@code {

    /* Parameters */

    [Parameter]
    public MLModelPredictionType MLModelPredictionType { get; set; } = MachineLearning.MLModelPredictionType.InductedToHallOfFameGeneralizedAdditiveModel;

    [Parameter]
    public bool UseMachineLearningModel { get; set; } = true;

    [Parameter]
    public MLBBaseballBatter BaseBallBatter { get; set; }

    [Parameter]
    public MLBHOFPrediction Prediction { get; set; }

    // Used for setting the background color of the baseball card
    string getCardColor(bool useMachineLearningModel, float probability, int homeRuns)
    {
        string cardColor = "red";


        if (useMachineLearningModel)
        {
            if (probability >= 0.75)
            {
                cardColor = "green";
            }
            else if (probability >= 0.50)
            {
                cardColor = "lightgreen";
            }
            else if (probability >= 0.25)
            {
                cardColor = "yellow";
            }
        }
        else
        {
            if (homeRuns >= 500)
            {
                cardColor = "green";
            }
        }

        return cardColor;
    }

    // Used for setting the prediction value
    private string getPredictionValue(bool useMachineLearningModel)
    {
        if (Prediction is null)
        {
            return string.Empty;
        }

        string predictionLabel = string.Empty;

        if (useMachineLearningModel)
        {
            predictionLabel = String.Format("{0:P2}", Prediction.Probability);
        }
        else
        {
            predictionLabel = Prediction.Prediction.ToString();
        }

        return predictionLabel;
    }
}