@page "/WhatIfAnalysisSingleModel"

@inject PredictionEnginePool<MLBBaseballBatter, MLBHOFPrediction> _predictionEnginePool;
@inject BaseballDataSampleService BaseballDataService

<h3>What-If Analysis (Single Machine Learning Model)</h3>

@if (isLoaded)
{
    <div>Select or Search any MLB Batter to perform what-if analysis:</div>
    <BlazoredTypeahead SearchMethod="@SearchBaseballPlayers"
                       @bind-Value="@selectedBatter"
                       Debounce="150" MaximumSuggestions="20"
                       EnableDropDown="true" ShowDropDownOnFocus="true">
        <SelectedTemplate>
            <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed+1))
        </SelectedTemplate>
        <ResultTemplate>
            <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed+1))
        </ResultTemplate>
        <NotFoundTemplate>
            Sorry, there weren't any baseball players found.
        </NotFoundTemplate>
    </BlazoredTypeahead>

    <p />
    <BaseballCardParent MultipleModels=false
                        Title="Static Prediction" SubTitle="Based on player's actual career statistics"
                        Notes="Single prediction of probability of the player being Inducted to Hall Of Fame."
                        StaticPrediction=true MLModelPredictionType=MLModelPredictionType.InductedToHallOfFameGeneralizedAdditiveModel
                        UseMachineLearningModel=true
                        BaseBallBatter=selectedBatter />
    <p />
    <BaseballCardParent MultipleModels=false
                        Title="Dynamic Prediction" SubTitle="Based on player's yearly pro-rated career statistics"
                        Notes="What-If prediction based on above selected player's single season averages multiplied the slider value of seasons played."
                        StaticPrediction=false MLModelPredictionType=MLModelPredictionType.InductedToHallOfFameGeneralizedAdditiveModel
                        UseMachineLearningModel=true
                        BaseBallBatter=selectedBatter />

}
else
{
    <p>Loading...</p>
}

@code {
    bool isLoaded = false;

    public List<MLBBaseballBatter> batters;
    MLBBaseballBatter selectedBatter;

    protected override async Task OnInitializedAsync()
    {
        // Build baseball batters list
        batters = await BaseballDataService.GetSampleBaseballData();

        // Select the initial batter, set UI state
        // Set the initial batter to Andy Average
        selectedBatter = batters.Where(a => a.FullPlayerName == MLBBaseballBatter.GetDefaultBatter()).FirstOrDefault();

        // set the page to loaded
        isLoaded = true;
    }

    private async Task<IEnumerable<MLBBaseballBatter>> SearchBaseballPlayers(string searchText)
    {
        return await Task.FromResult(batters.Where(x => x.FullPlayerName.ToLower().Contains(searchText.ToLower())).ToList());
    }
}
