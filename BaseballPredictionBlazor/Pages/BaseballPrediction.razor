@page "/baseballprediction"
@using BaseballPredictionBlazor.Shared
@using BaseballPredictionBlazor.Service
@inject IBaseballHallofFamePrediction baseBallPredictionService


<h1>MLB Baseball Batter Prediction</h1>
<form>
    <select class="custom-select" @onchange="@BatterSelected">
        @for (var i = 0; i < batters.Count; i++)
        {
            <option value="@i">@batters[i].FullPlayerName</option>
        }
    </select>
    <div class="form-group">
        <label for="labelPrediction">Prediction - On Hall of Fame Ballot:</label>
        @if (predictionOnHallOfFameBallot == null)
        {
            <small id="emailHelp" class="form-text text-muted">NONE</small>
        }
        else
        {
            <small id="emailHelp" class="form-text text-muted">@String.Format("{0:P4}.", predictionOnHallOfFameBallot.Probability)</small>
        }
    </div>
    <div class="form-group">
        <label for="labelPrediction">Prediction - Induction To Hall Of Fame:</label>
        @if (predictionHallOfFameInduction == null)
        {
            <small id="emailHelp" class="form-text text-muted">NONE</small>
        }
        else
        {
            <small id="emailHelp" class="form-text text-muted">@String.Format("{0:P4}.", predictionHallOfFameInduction.Probability)</small>
        }
    </div>
</form>
<button class="btn btn-primary" @onclick="@MakePrediction">Make Prediction</button>
<p />
<form>
    <div class="form-group">
        <label>Seasons Played:</label>
        <small id="SeasonsPlayed" class="form-text text-muted">@numberOfSeasonsPlayed</small>
        <input type="range" class="form-control-range" style="width: 500px;" min="1" max="40" step="1" @bind-value="@numberOfSeasonsPlayed" @bind-value:event="oninput" />
        <label for="labelPrediction">Prediction - On Hall of Fame Ballot:</label>
        <small id="PredictionOnHallOfFameBallotAdjustedForSeasons" class="form-text text-muted">@String.Format("{0:P4}.", MakePredictionOnHallOfFameBallotAdjustedForSeasons())</small>
        <label for="labelPrediction">Prediction - Induction To Hall Of Fame:</label>
        <small id="PredictionHallOfFameInductionAdjustedForSeason" class="form-text text-muted">@String.Format("{0:P4}.", MakePredictionHallOfFameInductionAdjustedForSeasons())</small>
    </div>
</form>

@code {
int numberOfSeasonsPlayed = 20;
MLBHOFPrediction predictionHallOfFameInduction = null;
MLBHOFPrediction predictionOnHallOfFameBallot = null;
MLBHOFPrediction predictionHallOfFameInductionAdjusted = null;
MLBHOFPrediction predictionOnHallOfFameBallotAdjusted = null;
public List<MLBBaseballBatter> batters;
MLBBaseballBatter selectedBatter;


MLBBaseballBatter badMLBBatter = new MLBBaseballBatter
{
    FullPlayerName = "Bad Player",
    ID = 100f,
    InductedToHallOfFame = false,
    LastYearPlayed = 0f,
    OnHallOfFameBallot = false,
    YearsPlayed = 2f,
    AB = 100f,
    R = 10f,
    H = 30f,
    Doubles = 1f,
    Triples = 1f,
    HR = 1f,
    RBI = 10f,
    SB = 10f,
    BattingAverage = 0.3f,
    SluggingPct = 0.15f,
    AllStarAppearances = 1f,
    MVPs = 0f,
    TripleCrowns = 0f,
    GoldGloves = 0f,
    MajorLeaguePlayerOfTheYearAwards = 0f,
    TB = 200f
};
MLBBaseballBatter averageMLBBatter = new MLBBaseballBatter
{
    FullPlayerName = "Average Player",
    ID = 200f,
    InductedToHallOfFame = false,
    LastYearPlayed = 0f,
    OnHallOfFameBallot = false,
    YearsPlayed = 17f,
    AB = 8393f,
    R = 1162f,
    H = 2300f,
    Doubles = 410f,
    Triples = 8f,
    HR = 400f,
    RBI = 1312f,
    SB = 9f,
    BattingAverage = 0.278f,
    SluggingPct = 0.476f,
    AllStarAppearances = 5f,
    MVPs = 0f,
    TripleCrowns = 0f,
    GoldGloves = 0f,
    MajorLeaguePlayerOfTheYearAwards = 0f,
    TB = 3910f
};
MLBBaseballBatter greatMLBBatter = new MLBBaseballBatter
{
    FullPlayerName = "Great Player",
    ID = 300f,
    InductedToHallOfFame = false,
    LastYearPlayed = 0f,
    OnHallOfFameBallot = false,
    YearsPlayed = 20f,
    AB = 10000f,
    R = 1900f,
    H = 3500f,
    Doubles = 500f,
    Triples = 150f,
    HR = 600f,
    RBI = 1800f,
    SB = 400f,
    BattingAverage = 0.350f,
    SluggingPct = 0.65f,
    AllStarAppearances = 14f,
    MVPs = 2f,
    TripleCrowns = 1f,
    GoldGloves = 4f,
    MajorLeaguePlayerOfTheYearAwards = 2f,
    TB = 7000f
};


void MakePrediction()
{
    predictionHallOfFameInduction = baseBallPredictionService.PredictInductedToHOF(selectedBatter);
    predictionOnHallOfFameBallot = baseBallPredictionService.PredictOnHallOfFameBallot(selectedBatter);
}

float MakePredictionHallOfFameInductionAdjustedForSeasons()
{
    MLBBaseballBatter baseBallBatterPerSeason = selectedBatter.CalculateStatisticsProratedBySeason(numberOfSeasonsPlayed);

    predictionHallOfFameInductionAdjusted = baseBallPredictionService.PredictInductedToHOF(baseBallBatterPerSeason);

    return predictionHallOfFameInductionAdjusted.Probability;
}

float MakePredictionOnHallOfFameBallotAdjustedForSeasons()
{
    MLBBaseballBatter baseBallBatterPerSeason = selectedBatter.CalculateStatisticsProratedBySeason(numberOfSeasonsPlayed);

    predictionOnHallOfFameBallotAdjusted = baseBallPredictionService.PredictOnHallOfFameBallot(baseBallBatterPerSeason);

    return predictionOnHallOfFameBallotAdjusted.Probability;
}

List<MLBBaseballBatter> GetBaseBallPlayers()
{
    batters = new List<MLBBaseballBatter>();
    batters.Add(badMLBBatter);
    batters.Add(averageMLBBatter);
    batters.Add(greatMLBBatter);

    return batters;
}

protected override void OnInit()
{
    batters = GetBaseBallPlayers();
    selectedBatter = badMLBBatter;
    numberOfSeasonsPlayed = (int) selectedBatter.YearsPlayed;
}

void BatterSelected(UIChangeEventArgs e)
{
    if (int.TryParse((string)e.Value, out var index) && index >= 0)
    {
        selectedBatter = batters[index];
        numberOfSeasonsPlayed = (int) selectedBatter.YearsPlayed;
    }
}

}
