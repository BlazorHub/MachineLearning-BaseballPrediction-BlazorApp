@page "/baseballprediction"

@using BaseballPredictionBlazor.Shared
@using BaseballPredictionBlazor.Service
@*@using Scalable.Model.Engine;*@
@using Microsoft.Extensions.ML;
@inject PredictionEnginePool<MLBBaseballBatter, MLBHOFPrediction> _predictionEnginePool;
@inject BaseballDataSampleService BaseballDataService
@*Previous Engines*@
@*@inject IBaseballHallofFamePrediction baseBallPredictionService*@
@*@inject MLModelEngine<MLBBaseballBatter, MLBHOFPrediction> _predictionEngines;*@

<h1>MLB Baseball Batter Prediction</h1>

@if (isLoaded)
{
    <div><b>Select a fictitious MLB Batter to make predictions:</b></div>
    <select class="custom-select" @onchange="@BatterSelected">
        @for (var i = 0; i < batters.Count; i++)
        {
            <option value="@i">@batters[i].FullPlayerName</option>
        }
    </select>

    <p>Inducted: @cardColorInductedToHallOfFameAdjusted</p>
    <p />
    <div class="card">
        <h5 class="card-header">Static Predictions</h5>
        <div class="card-body">
            <small class="form-text text-muted">Single prediction of probability of the player being <b><i>On Hall Of Fame Ballot</i></b> and probability of being <b><i>Inducted to Hall Of Fame</i></b>.</small>
            <div class="container">
                <div class="row">
                    <div class="col-md-6 col-xl-6">
                        <div class="card bg-c-@cardColorOnBallot order-card">
                            <div class="card-block">
                                <h5 class="text-right">On Hall Of Fame Ballot Probability - <span class="span-probability"><b>@String.Format("{0:P4}", predictionOnHallOfFameBallot.Probability)</b></span></h5>
                                <h5 class="text-right"><span><b>@selectedBatter.FullPlayerName</b></span></h5>
                                <div class="m-b-0">Seasons Played<span class="f-right">@selectedBatter.YearsPlayed</span></div>
                                <div class="m-b-0">Total Bases<span class="f-right">@selectedBatter.TB</span></div>
                                <div class="m-b-0">All-Star Appearances<span class="f-right">@selectedBatter.AllStarAppearances</span></div>
                                <div class="m-b-0">Slugging %<span class="f-right">@selectedBatter.SluggingPct</span></div>
                                <div class="m-b-0">...<span class="f-right"></span></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-xl-6">
                        <div class="card bg-c-@cardColorInductedToHallOfFame order-card">
                            <div class="card-block">
                                <h5 class="text-right">Inducted to Hall Of Fame Probability - <span class="span-probability"><b>@String.Format("{0:P4}", predictionHallOfFameInduction.Probability)</b></span></h5>
                                <h5 class="text-right"><span><b>@selectedBatter.FullPlayerName</b></span></h5>
                                <div class="m-b-0">Seasons Played<span class="f-right">@selectedBatter.YearsPlayed</span></div>
                                <div class="m-b-0">Total Bases<span class="f-right">@selectedBatter.TB</span></div>
                                <div class="m-b-0">All-Star Appearances<span class="f-right">@selectedBatter.AllStarAppearances</span></div>
                                <div class="m-b-0">Slugging %<span class="f-right">@selectedBatter.SluggingPct</span></div>
                                <div class="m-b-0">...<span class="f-right"></span></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <p></p>
    <div class="card">
        <h5 class="card-header">What-If Dynamic Predictions</h5>
        <div class="card-body">
            <small class="form-text text-muted">What-If prediction based on above selected player's single season averages multiplied the slider value of seasons played.</small>
            <small class="form-text text-muted">Dynamic prediction of probability of the player being <b><i>On Hall Of Fame Ballot</i></b> and probability of being <b><i>Inducted to Hall Of Fame</i></b>.</small>
            <form>
                <div class="form-group row">
                    <label for="seasonsInput" class="col-sm-4 col-form-label">Number of Seasons Played:</label>
                    <span class="sliderLabel">1 </span>
                    <input type="range" class="form-control-range" style="width: 50%;" min="1" max="40" step="1" value="@numberOfSeasonsPlayed"
                           @oninput="@SliderMoved"
                           />
                    <span class="sliderLabel"> 40</span>
                </div>
                <div class="container">
                    <div class="row">
                        <div class="col-md-6 col-xl-6">
                            <div class="card bg-c-@cardColorOnBallotAdjusted order-card">
                                <div class="card-block">
                                    <h5 class="text-right">On Hall Of Fame Ballot Probability - <span class="span-probability"><b>@String.Format("{0:P4}.", predictionOnHallOfFameBallotAdjusted.Probability)</b></span></h5>
                                    <h5 class="text-right"><span><b>@baseBallBatterPerSeason.FullPlayerName</b></span></h5>
                                    <div class="m-b-0">Seasons Played<span class="f-right">@baseBallBatterPerSeason.YearsPlayed</span></div>
                                    <div class="m-b-0">Total Bases<span class="f-right">@baseBallBatterPerSeason.TB</span></div>
                                    <div class="m-b-0">All-Star Appearances<span class="f-right">@baseBallBatterPerSeason.AllStarAppearances</span></div>
                                    <div class="m-b-0">Slugging %<span class="f-right">@baseBallBatterPerSeason.SluggingPct</span></div>
                                    <div class="m-b-0">...<span class="f-right"></span></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 col-xl-6">
                            <div class="card bg-c-@cardColorInductedToHallOfFameAdjusted order-card">
                                <div class="card-block">
                                    <h5 class="text-right">Inducted to Hall Of Fame Probability - <span class="span-probability"><b>@String.Format("{0:P4}.", predictionHallOfFameInductionAdjusted.Probability)</b></span></h5>
                                    <h5 class="text-right"><span><b>@baseBallBatterPerSeason.FullPlayerName</b></span></h5>
                                    <div class="m-b-0">Seasons Played<span class="f-right">@baseBallBatterPerSeason.YearsPlayed</span></div>
                                    <div class="m-b-0">Total Bases<span class="f-right">@baseBallBatterPerSeason.TB</span></div>
                                    <div class="m-b-0">All-Star Appearances<span class="f-right">@baseBallBatterPerSeason.AllStarAppearances</span></div>
                                    <div class="m-b-0">Slugging %<span class="f-right">@baseBallBatterPerSeason.SluggingPct</span></div>
                                    <div class="m-b-0">...<span class="f-right"></span></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    bool isLoaded = false;
    string cardColorOnBallot = string.Empty;
    string cardColorInductedToHallOfFame = string.Empty;
    string cardColorOnBallotAdjusted = "green";
    string cardColorInductedToHallOfFameAdjusted = "green";

    int numberOfSeasonsPlayed = 1;
    MLBHOFPrediction predictionHallOfFameInduction = null;
    MLBHOFPrediction predictionOnHallOfFameBallot = null;
    MLBHOFPrediction predictionHallOfFameInductionAdjusted = null;
    MLBHOFPrediction predictionOnHallOfFameBallotAdjusted = null;
    public List<MLBBaseballBatter> batters;
    MLBBaseballBatter selectedBatter;
    MLBBaseballBatter baseBallBatterPerSeason;

    protected override async Task OnInitializedAsync()
    {
        // Build baseball batters list
        batters = await BaseballDataService.GetSampleBaseballData();

        // Select the initial batter, set UI state
        selectedBatter = batters.Where(a => a.FullPlayerName == "Barry Badd").FirstOrDefault();
        numberOfSeasonsPlayed = (int)selectedBatter.YearsPlayed;

        // Make the ML predictions
        MakePrediction();

        MakePredictionHallOfFameInductionAdjustedForSeasons();
        MakePredictionOnHallOfFameBallotAdjustedForSeasons();

        // set the page to loaded
        isLoaded = true;
    }



    void MakePrediction()
    {
        // predictionHallOfFameInduction = //_predictionEnginePool.Predict(selectedBatter);
        //   baseBallPredictionService.PredictInductedToHOF(selectedBatter);
        //predictionOnHallOfFameBallot = baseBallPredictionService.PredictOnHallOfFameBallot(selectedBatter);

        predictionHallOfFameInduction = _predictionEnginePool.Predict("InductedToHallOfFame", selectedBatter);
        predictionOnHallOfFameBallot = _predictionEnginePool.Predict("OnHallOfFameBallot", selectedBatter);
        //SetUserInterfaceInfo();
    }

    float MakePredictionHallOfFameInductionAdjustedForSeasons()
    {
        baseBallBatterPerSeason = selectedBatter.CalculateStatisticsProratedBySeason(numberOfSeasonsPlayed);

        predictionHallOfFameInductionAdjusted = //_predictionEnginePool.Predict(baseBallBatterPerSeason);
            _predictionEnginePool.Predict("InductedToHallOfFame", baseBallBatterPerSeason);

        cardColorInductedToHallOfFameAdjusted = getCardColor(predictionHallOfFameInductionAdjusted.Probability);
        //StateHasChanged();
        return predictionHallOfFameInductionAdjusted.Probability;
    }

    float MakePredictionOnHallOfFameBallotAdjustedForSeasons()
    {
        baseBallBatterPerSeason = selectedBatter.CalculateStatisticsProratedBySeason(numberOfSeasonsPlayed);

        predictionOnHallOfFameBallotAdjusted = // baseBallPredictionService.PredictOnHallOfFameBallot(baseBallBatterPerSeason);
            _predictionEnginePool.Predict("OnHallOfFameBallot", baseBallBatterPerSeason);

        cardColorOnBallotAdjusted = getCardColor(predictionOnHallOfFameBallotAdjusted.Probability);
        //StateHasChanged();
        return predictionOnHallOfFameBallotAdjusted.Probability;
    }

    void BatterSelected(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            selectedBatter = batters[index];
            numberOfSeasonsPlayed = (int)selectedBatter.YearsPlayed;
            MakePrediction();

            MakePredictionOnHallOfFameBallotAdjustedForSeasons();
            MakePredictionHallOfFameInductionAdjustedForSeasons();
        }
    }

    void SliderMoved(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            numberOfSeasonsPlayed = index;

            MakePredictionOnHallOfFameBallotAdjustedForSeasons();
            MakePredictionHallOfFameInductionAdjustedForSeasons();
        }
    }

    string getCardColor(float probability)
    {
        string cardColor = "red";

        if (probability >= 0.75)
        {
            cardColor = "green";
        }
        else if (probability >= 0.50)
        {
            cardColor = "lightgreen";
        }
        else if (probability >= 0.35)
        {
            cardColor = "yellow";
        }

        return cardColor;
    }
}
